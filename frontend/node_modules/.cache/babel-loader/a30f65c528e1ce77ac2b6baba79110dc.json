{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useAudio = () => {\n  _s();\n\n  const [isMicOn, setIsMicOn] = useState(false);\n\n  const toggleAudio = ({\n    localParticipant\n  }) => {\n    if (!localParticipant) return;\n    const track = [...(localParticipant === null || localParticipant === void 0 ? void 0 : localParticipant.audioTracks.values())][0].track;\n\n    if (isMicOn && localParticipant) {\n      track.stop();\n      track.disable();\n    } else {\n      track.restart();\n      track.enable();\n    }\n\n    setIsMicOn(!isMicOn);\n  };\n\n  return {\n    isMicOn,\n    toggleAudio\n  };\n};\n\n_s(useAudio, \"T1dBrjrqoZjwvDR7bWAjsbDx5cY=\");\n\nexport { useAudio };","map":{"version":3,"sources":["C:/negocios/eagro/p1/frontend/src/hooks/useAudio.ts"],"names":["useState","useAudio","isMicOn","setIsMicOn","toggleAudio","localParticipant","track","audioTracks","values","stop","disable","restart","enable"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAOA,MAAMC,QAAQ,GAAG,MAGZ;AAAA;;AACH,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMI,WAAW,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAA6C;AAC/D,QAAI,CAACA,gBAAL,EAAuB;AACvB,UAAMC,KAAK,GAAG,CAAC,IAAGD,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEE,WAAlB,CAA8BC,MAA9B,EAAH,CAAD,EAA4C,CAA5C,EAA+CF,KAA7D;;AACA,QAAIJ,OAAO,IAAIG,gBAAf,EAAiC;AAC/BC,MAAAA,KAAK,CAACG,IAAN;AACAH,MAAAA,KAAK,CAACI,OAAN;AACD,KAHD,MAGO;AACLJ,MAAAA,KAAK,CAACK,OAAN;AACAL,MAAAA,KAAK,CAACM,MAAN;AACD;;AAEDT,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAZD;;AAcA,SAAO;AAAEA,IAAAA,OAAF;AAAWE,IAAAA;AAAX,GAAP;AACD,CArBD;;GAAMH,Q;;AAuBN,SAASA,QAAT","sourcesContent":["import { useState } from \"react\";\nimport { LocalParticipant } from \"twilio-video\";\n\ninterface ToggleAudioParams {\n  localParticipant: LocalParticipant | undefined;\n}\n\nconst useAudio = (): {\n  isMicOn: boolean;\n  toggleAudio: (data: ToggleAudioParams) => void;\n} => {\n  const [isMicOn, setIsMicOn] = useState(false);\n\n  const toggleAudio = ({ localParticipant }: ToggleAudioParams) => {\n    if (!localParticipant) return;\n    const track = [...localParticipant?.audioTracks.values()][0].track;\n    if (isMicOn && localParticipant) {\n      track.stop();\n      track.disable();\n    } else {\n      track.restart();\n      track.enable();\n    }\n\n    setIsMicOn(!isMicOn);\n  };\n\n  return { isMicOn, toggleAudio };\n};\n\nexport { useAudio };\n"]},"metadata":{},"sourceType":"module"}